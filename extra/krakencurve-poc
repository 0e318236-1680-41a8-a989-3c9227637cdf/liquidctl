#!/usr/bin/env python3

"""Adjust Kraken speeds in realtime with software.

This is still just a proof of concept.

Usage:
  krakencurve-poc [options] show-sensors
  krakencurve-poc [options] control <pump-profile> <fan-profile>
  krakencurve-poc --help
  krakencurve-poc --version

Options:
  --use-psutil            Enable extra sensors from psutil (requires psutil)
  --pump-sensor <sensor>  Select custom sensor for pump speed
  --fan-sensor <sensor>   Select custom sensor for fan speed
  --interval <seconds>    Update interval in seconds [default: 2]
  -n, --dry-run           Do not apply any settings
  -v, --verbose           Output additional information
  -g, --debug             Show debug information on stderr
  --version               Display the version number
  --help                  Show this message

Examples:
  krakencurve-poc control '(30,50),(40,100)' '(30,60),(45,100)'
  krakencurve-poc control '(30,50),(40,100)' '(20,25),(60,100)' --use-psutil --fan-sensor 'coretemp:Package id 0'
"""

import ast
import logging
import sys
import time

from docopt import docopt
from liquidctl.driver.kraken_two import KrakenTwoDriver
from liquidctl.util import normalize_profile, interpolate_profile

LOGGER = logging.getLogger(__name__)

LIQUID_SENSOR = 'kraken:Liquid temperature'


def read_sensors(cooler, psutil=None):
    sensors = {}
    if cooler:
        data = {k: v for k, v, u in cooler.get_status()}
        sensors[LIQUID_SENSOR] = data['Liquid temperature']
    if psutil:
        for m, li in psutil.sensors_temperatures().items():
            for label, current, _, _ in li:
                sensors['{}:{}'.format(m, label)] = current
    return sensors


def show_sensors(cooler, psutil=None):
    sensors = read_sensors(cooler, psutil)
    for k, v in sensors.items():
        print('{:<70}  {:>6}{}'.format(k, v, '°C'))


def parse_profile(arg, mintemp, maxtemp, minduty=0, maxduty=100):
    """Parse, validate and normalize a temperature–duty profile.

    >>> parse_profile('(20,30),(30,50),(34,80),(40,90)', 0, 60, 25, 100)
    [(20, 30), (30, 50), (34, 80), (40, 90), (60, 100)]
    >>> parse_profile('35', 0, 60, 25, 100)
    [(0, 35), (59, 35), (60, 100)]

    The profile is validated in structure and acceptable ranges.  Duty is
    checked against `minduty` and `maxduty`.  Temperature must be between 0°C
    and `maxtemp`.

    >>> parse_profile('(20,30),(50,100', 0, 60, 25, 100)
    Traceback (most recent call last):
        ...
    ValueError: Profile must be comma-separated (temperature, duty) tuples
    >>> parse_profile('(20,30),(50,100,2)', 0, 60, 25, 100)
    Traceback (most recent call last):
        ...
    ValueError: Profile must be comma-separated (temperature, duty) tuples
    >>> parse_profile('(20,30),(50,97.6)', 0, 60, 25, 100)
    Traceback (most recent call last):
        ...
    ValueError: Duty must be integer number between 25 and 100
    >>> parse_profile('(20,15),(50,100)', 0, 60, 25, 100)
    Traceback (most recent call last):
        ...
    ValueError: Duty must be integer number between 25 and 100
    >>> parse_profile('(20,30),(70,100)', 0, 60, 25, 100)
    Traceback (most recent call last):
        ...
    ValueError: Temperature must be integer number between 0 and 60

    """
    try:
        val = ast.literal_eval('[' + arg + ']')
        if len(val) == 1 and isinstance(val[0], int):
            # for arg == '<number>' set fixed duty between mintemp and maxtemp - 1
            val = [(mintemp, val[0]), (maxtemp - 1, val[0])]
    except:
        raise ValueError("Profile must be comma-separated (temperature, duty) tuples")
    for step in val:
        if not isinstance(step, tuple) or len(step) != 2:
            raise ValueError("Profile must be comma-separated (temperature, duty) tuples")
        temp, duty = step
        if not isinstance(temp, int) or temp < mintemp or temp > maxtemp:
            raise ValueError("Temperature must be integer between {} and {}".format(mintemp, maxtemp))
        if not isinstance(duty, int) or duty < minduty or duty > maxduty:
            raise ValueError('Duty must be integer between {} and {}'.format(minduty, maxduty))
    return normalize_profile(val, critx=maxtemp)


def control(cooler, pump_profile, fan_profile, update_interval,
            pump_sensor, fan_sensor, psutil=None):
    LOGGER.info('pump: following %s, profile %s', pump_sensor, str(pump_profile))
    LOGGER.info('fan: following %s, profile %s', fan_sensor, str(fan_profile))
    while True:
        sensors = read_sensors(cooler, psutil)
        LOGGER.info('pump control sensor: %.1f°C; fan control sensor: %.1f°C',
                    sensors[pump_sensor], sensors[fan_sensor])
        pump_duty = interpolate_profile(pump_profile, sensors[pump_sensor])
        fan_duty = interpolate_profile(fan_profile, sensors[fan_sensor])
        cooler.set_instantaneous_speed('pump', pump_duty)
        cooler.set_instantaneous_speed('fan', fan_duty)
        time.sleep(update_interval)


if __name__ == '__main__':
    if sys.argv[1] == 'doctest':
        import doctest
        doctest.testmod(verbose=True)
        sys.exit(0)

    args = docopt(__doc__, version='0.0.1')

    if args['--debug']:
        logging.basicConfig(level=logging.DEBUG, format='[%(levelname)s] %(name)s: %(message)s')
        logging.getLogger('usb').setLevel(logging.DEBUG)
        import usb._debug
        usb._debug.enable_tracing(True)
        args['--verbose'] = True
    elif args['--verbose']:
        logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
    else:
        logging.basicConfig(level=logging.WARNING, format='%(message)s')
        sys.tracebacklimit = 0

    if args['--use-psutil']:
        import psutil
    else:
        psutil = None

    device = KrakenTwoDriver.find_supported_devices()[0]
    device.connect()
    if args['--dry-run']:
        LOGGER.warning('This is a --dry-run')
        device.dry_run = True

    try:
        if args['show-sensors']:
            show_sensors(device, psutil)
        elif args['control']:
            pump_sensor = args['--pump-sensor'] or LIQUID_SENSOR
            pump_max_temp = 100 if pump_sensor != LIQUID_SENSOR else 60
            fan_sensor = args['--fan-sensor'] or LIQUID_SENSOR
            fan_max_temp = 100 if fan_sensor != LIQUID_SENSOR else 60

            pump_profile = parse_profile(args['<pump-profile>'], 0, pump_max_temp, minduty=50)
            fan_profile = parse_profile(args['<fan-profile>'], 0, fan_max_temp, minduty=25)

            control(device, pump_profile, fan_profile,
                    update_interval=int(args['--interval']),
                    pump_sensor=pump_sensor,
                    fan_sensor=fan_sensor,
                    psutil=psutil)
        else:
            raise Exception('Nothing to do')
    except KeyboardInterrupt:
        LOGGER.info('Stopped by user')
    finally:
        device.disconnect()

